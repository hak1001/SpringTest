<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd">
						
	<!-- 코드의 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기  -->
	<!-- <context:annotation-config /> -->						
							
	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource" >
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost/springbook?characterEncoding=UTF-8" />
		<property name="username" value="spring" />
		<property name="password" value="book" />
	</bean>
	
	<!-- sql service  -->
	<bean id="sqlService" class="springbook.user.sqlservice.OxmSqlService" >
		<property name="unmarshaller" ref="unmarshaller" />
		<property name="sqlRegistry" ref="sqlRegistry" />
		<!-- <property name="sqlmap" value="classpath:springbook/user/dao/sqlmap.xml" />
		<property name="sqlmap" value="file:/opt/resources/sqlmap.xml" />
		<property name="sqlmap" value="http://www.epril.com/resources/sqlmap.xml" /> -->
	</bean>
	
	<bean id="sqlRegistry" class="springbook.user.sqlservice.updatable.EmbeddedDbSqlRegistry" >
		<property name="dataSource" ref="embededDatabase" /> 
	</bean>
	
	<jdbc:embedded-database id="embededDatabase" type="HSQL">
		<jdbc:script location="classpath:/springbook/user/sqlservice/updatable/sqlRegistrySchema.sql"/>
	</jdbc:embedded-database>
	
	<bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="contextPath" value="springbook.user.sqlservice.jaxb" />
	</bean> 
	
	<!-- <bean id="sqlService" class="springbook.user.sqlservice.BaseSqlService" >
		<property name="sqlReader" ref="sqlReader" />
		<property name="sqlRegistry" ref="sqlRegistry" />
	</bean>
	
	<bean id="sqlRegistry" class="springbook.user.sqlservice.HashMapSqlRegistry" />
	
	<bean id="sqlReader" class="springbook.user.sqlservice.JaxbXmlSqlReader" >
		<property name="sqlmapFile" value="sqlmap.xml" />
	</bean> -->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name = "dataSource" ref="dataSource" />
	</bean>
	
	<!-- JTA transaction -->
	<!-- <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name = "dataSource" ref="dataSource" />
	</bean> -->
	
	<!-- aop -->
	<!-- @Transactional이 붙은 타입과 메소드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기 -->
	<tx:annotation-driven/>
	
	<!-- <aop:config>
		<aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)"/>
	</aop:config>
	
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice> -->
	
	<!-- aop -->
	<!--
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
	
	<bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
		<property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))" />
	</bean>
	
	<bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="transactionAdvice" />
		<property name="pointcut" ref="transactionPointcut"/>
	</bean>
	
	<bean id="transactionAdvice" class="springbook.user.service.TransactionAdvice">	
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	 -->
	 
	<!-- application components -->
 	<bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
		<property name="dataSource" ref="dataSource" />
		<property name="sqlService" ref="sqlService" />
	</bean>
	
	<bean id="userService" class="springbook.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao" />
		<property name="mailSender" ref="mailSender" />	
	</bean>
	
	<bean id="testUserService" class="springbook.user.service.UserServiceTest$TestUserService" parent="userService" />
	
	<!-- 
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="mail.server.com" />
	</bean>
	 -->
	<bean id="mailSender" class="springbook.user.service.DummyMailSender" />
</beans>